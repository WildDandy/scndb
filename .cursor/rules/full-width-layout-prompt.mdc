# Full-Width Layout Implementation Prompt

## When to Use Full-Width Layout
Use this layout for pages that need maximum content space without sidebars:
- Glossary pages
- Documentation pages
- Content-heavy pages
- Pages without filtering needs

## Implementation Guidelines

### HTML Structure
```html
<div class="container">
    <!-- Content directly in container - no main-content wrapper needed -->
    <section class="page-content">
        <h1 class="search-main-title">PAGE TITLE</h1>
        <!-- Your page content here -->
    </section>
</div>
```

### Key Points
- **No sidebar wrapper**: Content goes directly in `.container`
- **No `.main-content` div**: Skip the two-column layout wrapper
- **Use semantic sections**: Wrap content in appropriate semantic tags
- **Typography**: Use `.search-main-title` for main page titles (48px display size)

### CSS Classes Available
- `.search-main-title` - Large page titles (3rem/48px)
- `.container` - Main page container with proper spacing
- Standard typography classes from the design system

## Documentation Reference
For complete layout specifications, see:
- `.documentation/sidebar_component_guide.md` - Layout variants section
- `.documentation/complete-unified-system.md` - Typography system
- `.documentation/style-guide-documentation.md` - Complete design system reference
- `style-guide.html` - Interactive style guide with live examples
- `shared/templates/` - Available layout templates and examples

## Examples in Codebase
- `osa-network-orders/glossary.html` - Full-width glossary implementation
- `scientology-dictionary/index.html` - Dictionary with full-width layout

## Templates Reference
Before implementing, check available templates in `shared/templates/`:
- `master-layout.html` - Base layout template
- `example-implementation.html` - Implementation examples
- `grid-examples.html` - Grid layout patterns

## Best Practices
1. **Always check the style guide first**: Review `style-guide.html` for current design tokens
2. **Reference templates**: Use `shared/templates/` for proven layout patterns
3. Always use semantic HTML structure
4. Follow the established typography hierarchy
5. Maintain consistent spacing using CSS variables
6. Ensure responsive behavior across devices
7. Test in both clean and terminal themes